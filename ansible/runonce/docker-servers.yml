#!/usr/bin/env ansible-playbook
---
- name: Configure docker servers for echoCTF
  hosts: all
  gather_facts: true
  become: true
  become_method: su
  tasks:
  - name: Set timezone to UTC
    timezone:
      name: UTC

  - name: Kill any running pm2
    shell: pm2 kill
    no_log: true
    ignore_errors: true

  - name: Ensure docker services are stopped
    command: service docker stop
    no_log: true
    ignore_errors: true

  - name: Ensure existing docker service overrides are removed
    ansible.builtin.file:
      path: "{{item}}"
      state: absent
    with_items:
      - /etc/systemd/system/docker.service.d/dockerd-service-override.conf
      - /etc/systemd/system/docker.service.d/override.conf
      - /etc/systemd/system/pm2-root.service.d/pm2-root-service-override.conf
      - /etc/systemd/system/pm2-root.service.d/override.conf

  - name: Remove any existing /etc/docker/daemon.json
    ansible.builtin.file:
      path: /etc/docker/daemon.json
      state: absent

  - name: Set hostname based on host_var
    hostname:
      name: "{{fqdn}}"

  - name: Configure hosts
    copy:
      content: "{{etchosts}}\n"
      dest: /etc/hosts
    when: etchosts is defined

  - name: Allow release-info to change for APT repositories
    when: ansible_facts['distribution'] == 'Debian'
    command: apt-get update -y --allow-releaseinfo-change
    no_log: "{{DEBUG|default(true)}}"

  - name: Update package cache
    apt:
      update_cache: yes

  - name: Install preInst packages
    no_log: "{{DEBUG|default(true)}}"
    apt:
      state: present
      pkg: "{{pre_apt}}"
    when: pre_apt is defined and pre_apt|length > 0

  - name: Add apt keys
    when: aptKeys is defined
    apt_key:
      url: "{{item.key}}"
      state: "{{item.state}}"
    with_items: "{{aptKeys}}"

  - name: Add apt repositories
    when: aptRepos is defined
    apt_repository:
      repo: "{{item.repo}}"
      state: "{{item.state}}"
    with_items: "{{aptRepos}}"

  - name: Update package cache
    apt:
      update_cache: yes

  - name: Update all packages to the latest version
    no_log: "{{DEBUG|default(true)}}"
    apt:
      upgrade: dist

  - name: Adding defined users (optional)
    when: users is defined
    user:
      name: "{{item.name}}"
      comment: "{{item.comment}}"
      uid: "{{item.uid}}"
      password: '{{item.password}}'
    with_items: "{{users}}"

  - name: Set authorized keys for root from github
    when: sshkeys is defined
    authorized_key:
      user: root
      state: present
      key: "https://github.com/{{item}}.keys"
    with_items: "{{sshkeys}}"

  - name: Set authorized keys for sysadmin
    when: sshkeys is defined
    authorized_key:
      user: sysadmin
      state: present
      key: "https://github.com/{{item}}.keys"
    with_items: "{{sshkeys}}"

  - name: Make sure sysadmin has sudo access
    lineinfile:
      path: /etc/sudoers.d/90_sysadmin
      line: 'sysadmin ALL=(ALL) NOPASSWD:ALL'
      create: yes

  - name: Ensure /home/sysadmin is owned by sysadmin user (recursive)
    shell: chown -R sysadmin /home/sysadmin
    when: users is defined

  - name: Install post install packages
    apt:
      state: latest
      pkg: "{{post_apt}}"
    when: post_apt is defined and post_apt|length > 0

#  - name: Install pip packages
#    no_log: "{{DEBUG|default(true)}}"
#    pip: name="{{item.name}}" version="{{item.version|default(omit)}}" state="{{item.state}}"
#    with_items: "{{pip}}"
#    when: pip is defined

  - name: Check if we're working with cloud-init
    ansible.builtin.stat:
      path: /etc/cloud/cloud.cfg.d
    register: st_cloud_cfg
    ignore_errors: true

  - name: Disable cloud init on network interfaces
    copy:
      content: "network: {config: disabled}"
      dest: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
    ignore_errors: true
    when: st_cloud_cfg.stat.isdir is defined and st_cloud_cfg.stat.isdir

  - name: Clone docker-event-action
    git:
      repo: "https://github.com/echoCTF/docker-event-action.git"
      dest: /opt/docker-event-action
      accept_hostkey: yes
      clone: yes
      force: yes
      depth: 1
    tags:
      - docker-event-action

  - name: Copy docker data folder structure
    synchronize:
      src: "{{item.src}}"
      dest: "{{item.dst}}"
      delete: "yes"
    with_items: "{{sync}}"
    when: sync is defined
    tags:
      - SYNC

  - name: Force /etc/network/interfaces
    ignore_errors: true
    when: lookup('ansible.builtin.fileglob', inventory_dir+'/../../templates/etc_network_interfaces.j2') != []
    ansible.builtin.template:
      src:  "{{inventory_dir}}/../../templates/etc_network_interfaces.j2"
      dest: "/etc/network/interfaces.d/{{network.driver_options.parent}}.conf"
      owner: root
      group: root
      mode: '0644'
    vars:
      network_interfaces: "{{network}}"
    tags:
      - interfaces

  - name: Remove DHCP from interfaces
    copy:
      dest: /etc/network/interfaces
      content: |
        auto lo
        iface lo inet loopback
        source /etc/network/interfaces.d/*
    tags:
      - interfaces

  - name: Copy Dockerfiles data folder structure
    when: SYNC_DOCKERFILES is defined and SYNC_DOCKERFILES
    synchronize:
      src: "../Dockerfiles"
      dest: /opt
    tags:
      - SYNC

  - name: Set authorized keys
    when: ETSCTF_authorized_keys is defined and item.key is defined
    authorized_key:
      user: "{{item.user}}"
      state: present
      key: "{{ lookup('file', '{{item.key}}') }}"
    with_items: "{{ETSCTF_authorized_keys}}"

  - name: Adding existing user sysadmin to group docker
    user: name=sysadmin
          groups=docker
          append=yes

  - name: Configure grub to allow memory and swap accounting (cgroups)
    lineinfile:
      path: /etc/default/grub
      regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet"'
      line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet cgroup_enable=memory swapaccount=1"'

  - name: Push grub updates
    no_log: "{{DEBUG|default(true)}}"
    command: /usr/sbin/update-grub
    environment:
      PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  - name: Configure /etc/docker/daemon.json
    copy:
      dest: "/etc/docker/daemon.json"
      content: |
        {
          "insecure-registries":{{ DOCKER_REGISTRY | default([])|to_nice_json}},
          "hosts": ["tcp://0.0.0.0:2376", "unix://"]
        }

  - name: Configure new systemd docker overrides
    when: lookup('ansible.builtin.fileglob', inventory_dir+'/../../files/dockerd-service-override.conf') != []
    copy:
      src: "{{inventory_dir}}/../../files/dockerd-service-override.conf"
      dest: /etc/systemd/system/docker.service.d/

  - name: Configure new systemd pm2-root overrides
    when: lookup('ansible.builtin.fileglob', inventory_dir+'/../../files/pm2-root-service-override.conf') != []
    copy:
      src: "{{inventory_dir}}/../../files/pm2-root-service-override.conf"
      dest: /etc/systemd/system/pm2-root.service.d/

  - name: Reload systemd
    command: systemctl daemon-reload

  - name: Ensure docker deamon is running, also issue daemon-reload to pick up config changes
    ansible.builtin.systemd:
      state: restarted
      daemon_reload: true
      name: docker

  - name: Remove docker network if exists
    command: docker network rm -f {{network.name}}
    ignore_errors: true

  - name: Check if docker network exists
    command: docker network ls -qf name={{network.name}}
    register: netresult
    changed_when: false
    when: network is defined

  - name: Create docker network if needed
    docker_network:
      name: "{{network.name}}"
      state: present
      driver: "{{network.driver}}"
      driver_options: "{{network.driver_options}}"
      ipam_config: "{{network.ipam_options}}"
    when: network is defined and netresult is defined and netresult.stdout == ""

  - name: Force removal of existing containers
    when: containers is defined
    docker_container:
      name: "{{item.key}}"
      force_kill: true
      restart: true
      keep_volumes: false
      image: "{{item.value.image}}"
      state: "absent"
    with_dict: "{{ containers }}"

  - name: Build container image if needed
    when: containers is defined and item.value.build is defined
    docker_image:
      path: "/opt/build/{{item.value.build}}"
      name: "{{item.value.image}}"
      nocache: yes
    with_dict: "{{ containers }}"

  - name: Install defined non managed containers
    when: containers is defined
    docker_container:
      name: "{{item.key}}"
      image: "{{item.value.image}}"
      state: "started"
      volumes: "{{ item.value.volumes | default(omit) }}"
      ports: "{{ item.value.ports | default(omit) }}"
      hostname: "{{item.value.hostname| default(omit)}}"
      mac_address: "{{item.value.mac_address| default(omit)}}"
      purge_networks: "{{ item.value.purge_networks | default('no')}}"
      domainname: "{{ item.value.domainname | default(omit) }}"
      memory_limit: "{{ item.value.memory_limit|default(omit) }}"
      dns: "{{ item.value.dns | default(omit) }}"
      networks: "{{ item.value.networks | default(omit) }}"
      links: "{{item.value.links|default(omit)}}"
      env: "{{ item.value.env | default(omit) }}"
      cleanup: yes
      restart_policy: "unless-stopped"
    with_dict: "{{ containers }}"

  - name: Create iptables rules
    when: lookup('ansible.builtin.fileglob', inventory_dir+'/../../templates/iptables_rules.v4') != []
    template:
      src:  "{{inventory_dir}}/../../templates/iptables_rules.v4"
      dest: /etc/iptables/rules.v4

  - name: Disable IPv6 (needs restart)
    no_log: "{{DEBUG|default(true)}}"
    lineinfile:
      path: /etc/sysctl.conf
      line: "{{item}}"
      create: yes
    with_items:
      - "net.ipv6.conf.default.disable_ipv6 = 1"
      - "net.ipv6.conf.lo.disable_ipv6 = 1"
      - "kernel.randomize_va_space = 0"
    tags:
      - sysctl

#  - name: Download node16 setup script
#    no_log: "{{DEBUG|default(true)}}"
#    ansible.builtin.get_url:
#      url: https://deb.nodesource.com/setup_16.x
#      dest: /root/setup_16.x
#      mode: '0500'
#    tags:
#      - docker-event-action
#      - node

#  - name: Run node setup
#    shell: /root/setup_16.x
#    no_log: "{{DEBUG|default(true)}}"
#    args:
#      executable: /bin/bash
#    tags:
#      - docker-events
#      - node

  - name: Install nodejs packages
    no_log: "{{DEBUG|default(true)}}"
    apt: name="nodejs" state="present"

  - name: Install npm package
    no_log: "{{DEBUG|default(true)}}"
    apt: name="npm" state="present"

  - name: Remove useless packages from the cache
    no_log: "{{DEBUG|default(true)}}"
    apt:
      autoclean: yes

  - name: Remove dependencies that are no longer required
    no_log: "{{DEBUG|default(true)}}"
    apt:
      autoremove: yes

  - name: Run the equivalent of "apt-get clean"
    no_log: "{{DEBUG|default(true)}}"
    apt:
      clean: yes

  - name: Install pm2
    npm:
      name: pm2
      global: true
    tags:
      - pm2

  - name: Active pm2 start at boot
    no_log: "{{DEBUG|default(true)}}"
    ignore_errors: true
    shell: pm2 startup
    args:
      chdir: /opt/docker-event-action
    tags:
      - pm2

  - name: Run npm install for docker-event-action
    npm:
      path: /opt/docker-event-action
    tags:
      - pm2

  - name: Copy local ctables
    when: lookup('ansible.builtin.fileglob', inventory_dir+'/../../files/ctables') != []
    copy:
      src:  "{{inventory_dir}}/../../files/ctables"
      dest: /usr/local/bin/ctables
      owner: root
      group: root
      mode: 0500
    tags:
      - ctables

  - name: Configure resolv.conf
    copy:
      content: "{{resolvconf}}\n"
      dest: /etc/resolv.conf
    when: resolvconf is defined

  - name: Register docker-event-action with pm2
    no_log: "{{DEBUG|default(true)}}"
    shell: pm2 start /opt/docker-event-action/docker-events.js
    args:
      chdir: /opt/docker-event-action
    tags:
      - pm2
