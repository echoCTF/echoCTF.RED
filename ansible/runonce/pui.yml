#!/usr/bin/env ansible-playbook
---
- name: "Setup an OpenBSD server for participantUI (frontend)"
  hosts: all
  gather_facts: false
  vars_prompt:
    - name: "myname"
      prompt: "1/7. System hostname?"
      default: "pui.example.local"
      private: no
    - name: "pui_ext_ip"
      prompt: "2/7. What is the external (public) IP?"
      default: "1.2.3.4"
      private: no
    - name: "db_ip"
      prompt: "3/7. What is the database server IP?"
      default: "10.7.0.253"
      private: no
#    - name: "GITHUB_OAUTH_TOKEN"
#      prompt: "4/8. Provide a github oauth token?"
#      default: ""
#      private: no
#    - name: "GITHUB_REPO"
#      prompt: "5/8. Provide a github repo to clone?"
#      default: "{{ lookup('pipe', 'git remote get-url origin') }}"
#      private: no
    - name: "domain_name"
      prompt: "4/7. Provide the domain the frontend will run on?"
      default: "pui.example.com"
      private: no
    - name: "interconnect_interface"
      prompt: "5/7. What is the interconnect interface to be used?"
      default: "em1"
      private: no
    - name: "pui_ip"
      prompt: "6/7. What is the interconnect IP to be used?"
      default: "10.7.0.200"
      private: no
    - name: "admins_domain"
      prompt: "7/7. admin domain for TXT rules?"
      default: "admin.example.com"
      private: no
  vars:
    ansible_python_interpreter: /usr/local/bin/python3
    ansible_user: root
#    sshkeys:
#      - github_username
    users:
      - { name: sysadmin, comment: "CTF Admin", uid: 375, password: '*' }
      - { name: participantUI, comment: "{{domain_name}} Participants UI", uid: 4000, password: '*' }
    validation_key: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
    versions:
      PHP: "8.4"
      PHP_MINOR: "6"
      AUTOCONF: "2.69"
      AUTOMAKE: "1.16"
      ICU_MAJOR: 76
      ICU_MINOR: 1
    sysctl:
      kern.bufcachepercent: 30
      net.inet.ip.ifq.maxlen: 2560
      net.inet.ip.maxqueue: 2048
      kern.somaxconn: 2048
      net.bpf.bufsize: 2097152
      net.bpf.maxbufsize: 4194304
      kern.seminfo.semmni: 1024
      kern.seminfo.semmns: 4096
      kern.shminfo.shmmax: 67018864
      kern.shminfo.shmall: 32768
      kern.maxfiles: 104060
    post_inst: |
      Things to do:
        - Update /etc/administrators.conf with your IP's
        - Update /etc/letsencrypt/lexicon-vultr.sh with your details
        - Reboot the system for the changes to take effect
    rcctl:
      - { name: check_quotas, state: "disable" }
      - { name: cron, state: "enable" }
      - { name: ntpd, state: "enable" }
      - { name: pflogd, state: "disable" }
      - { name: slaacd, state: "disable" }
      - { name: smtpd, state: "disable" }
      - { name: sndiod, state: "disable" }
      - { name: "php{{versions.PHP|replace('.','')}}_fpm", state: "enable" }
      - { name: mysqld, state: "disable" }
      - { name: memcached, state: "disable" }
      - { name: unbound, state: "enable" }
      - { name: supervisord, state: "enable"}
    packages:
      - autoconf%2.69
      - automake%1.16
      - curl
      - git
      - rsync--
      - libmemcached
      - libtool
      - memcached--
      - nginx
      - "pecl{{versions.PHP|replace('.','')}}-memcached"
      - "php-gd%{{versions.PHP}}"
      - "php-curl%{{versions.PHP}}"
      - "php-intl%{{versions.PHP}}"
      - "php-pdo_mysql%{{versions.PHP}}"
      - "php-zip%{{versions.PHP}}"
      - certbot
      - py3-pip
      - py3-requests
      - py3-mysqlclient
      - py3-setuptools
      - py3-netaddr
      - supervisor

  tasks:
  - name: Sync date time
    raw: rdate pool.ntp.org

  - name: Install ansible (raw)
    raw: pkg_add ansible py3-mysqlclient

  - name: Gather facts
    setup:

  - name: Set hostname
    hostname:
      name: "{{myname}}"

  - name: Make hostname permanent (/etc/myname)
    copy:
      content: "{{ myname }}\n"
      dest: /etc/myname

  - name: Create fresh /etc/hosts
    copy:
      content: "127.0.0.1 localhost\n{{db_ip}} db\n{{pui_ext_ip}} {{  myname.split('.')[0] | lower }} {{ myname }}\n"
      dest: /etc/hosts

  - name: Configure interconnect interface
    lineinfile:
      path: "/etc/hostname.{{interconnect_interface}}"
      owner: root
      group: wheel
      mode: '0640'
      line: "{{item}}"
      create: yes
    with_items:
      - "inet {{pui_ip}} 255.255.255.0 NONE group interconnect"
      - "up -inet6"

  - name: Bring interface up
    command: sh /etc/netstart {{interconnect_interface}}

  - name: Copy a examples/rc.local => /etc/rc.local
    ansible.builtin.copy:
      src: /etc/examples/rc.local
      dest: /etc/rc.local
      mode: "0500"
      owner: "root"
      group: "wheel"
      remote_src: yes

  - name: Configure PS1 for root and skeleton
    lineinfile:
      path: "{{item}}"
      owner: root
      group: wheel
      mode: '0640'
      line: "export PS1='\\u@\\H:\\w\\$ '"
    with_items:
      - '/etc/skel/.profile'
      - '/root/.profile'

  - name: Configure HISTSIZE for root and skeleton
    lineinfile:
      path: "{{item}}"
      owner: root
      group: wheel
      mode: '0640'
      line: "export HISTSIZE=10000"
    with_items:
      - '/etc/skel/.profile'
      - '/root/.profile'

  - name: Install packages
    shell: "pkg_add {{packages| join(' ')}}"

  - name: Install lexicon (raw)
    raw: pip3 install --break-system-packages lexicon

  - name: Install composer
    get_url:
      url: https://getcomposer.org/composer-stable.phar
      dest: /usr/local/bin/composer
      mode: '0555'

  - name: Create php symlink without version
    file:
      src: /usr/local/bin/php-{{versions.PHP}}
      dest: /usr/local/bin/php
      owner: root
      group: wheel
      state: link


  - name: Add user 'sysadmin'
    user:
      name: "{{item.name}}"
      comment: "{{item.comment}}"
      uid: "{{item.uid}}"
      password: '{{item.password}}'
    with_items: "{{users}}"

  - name: Set authorized keys for root
    when: sshkeys is defined
    authorized_key:
      user: root
      state: present
      key: "https://github.com/{{item}}.keys"
    with_items: "{{sshkeys}}"

  - name: Set authorized keys for sysadmin
    when: sshkeys is defined
    authorized_key:
      user: sysadmin
      state: present
      key: "https://github.com/{{item}}.keys"
    with_items: "{{sshkeys}}"

  - name: Configure default services
    command: "rcctl {{item.state}} {{item.name}}"
    when: item.state is defined
    with_items: "{{rcctl}}"

  - name: Clone echoCTF repo
    when: GITHUB_REPO is defined
    git:
      repo: "{{GITHUB_REPO}}"
      dest: /home/participantUI/{{domain_name}}
      accept_hostkey: yes
      clone: yes
      force: yes
      depth: 1
      version: "{{ GITHUB_REPO_BRANCH | default('main') }}"

  - name: Fix CHROOT environment for participantUI
    file: path=/home/participantUI/{{item}} mode=0755 state=directory
    tags:
      - chroot
    with_items:
      - dev
      - etc
      - etc/ssl
      - bin
      - usr/X11R6/lib
      - usr/bin
      - usr/libexec
      - usr/local/lib
      - "usr/local/share/icu/{{versions.ICU_MAJOR}}.{{versions.ICU_MINOR}}"
      - usr/lib
      - acme/.well-known/acme-challenge
      - htdocs

  - name: "Copy pf and other conf files"
    copy:
      src: "{{item.src}}"
      dest: "{{item.dest}}"
    with_items:
      - { src: '{{playbook_dir}}/../templates/pf.conf.j2', dest: '/etc/pf.conf' }
      - { src: '{{playbook_dir}}/../templates/pui.service.conf.j2', dest: '/etc/service.pf.conf' }
      - { src: '{{playbook_dir}}/../../contrib/unbound.conf', dest: '/var/unbound/etc/unbound.conf' }
      - { src: '{{playbook_dir}}/../../contrib/downtime.html', dest: '/home/participantUI/htdocs/index.html' }

  - name: "Process templates"
    template:
      src: "{{item.src}}"
      dest: "{{item.dest}}"
    with_items:
      - { src: '{{playbook_dir}}/../templates/httpd.conf.j2', dest: '/etc/httpd.conf', domain: "{{domain_name}}"}
      - { src: '{{playbook_dir}}/../templates/acme-client.conf.j2', dest: '/etc/acme-client.conf', domain: "{{domain_name}}", challenge_dir: "/home/participantUI/acme/.well-known/acme-challenge/" }

  - name: Generate pf tables files
    copy:
     content: "{{item.content|default('')}}"
     dest: "{{item.dest}}"
    with_items:
    - { dest: "/etc/administrators.conf" }
    - { dest: "/etc/docker_clients.conf" }
    - { dest: "/etc/docker_servers.conf" }
    - { content: "0.0.0.0/0", dest: "/etc/maintenance.conf" }
    - { dest: "/etc/moderators.conf" }
    - { dest: "/etc/registry_clients.conf" }
    - { dest: "/etc/registry_servers.conf" }
    - { dest: "/etc/targets.conf" }
    - { dest: "/etc/match-findings-pf.conf" }
    - { dest: "/etc/targets_networks.conf" }
    - { dest: "/etc/targets_anchor.conf" }
    - { dest: "/etc/offense_anchor.conf" }
    - { dest: "/etc/service_clients.conf" }

  - name: Fix CHROOT environment
    file: path=/home/{{item.user}}/{{item.dir}} mode="{{item.mode}}" state=directory
    tags:
      - chroot
    with_items:
      - { user: participantUI, dir: logs, mode: "0755" }
      - { user: participantUI, dir: tmp, mode: "1777" }

  - name: Fix CHROOT resolv.conf
    copy:
      dest: /home/participantUI/etc/resolv.conf
      content: "nameserver 127.0.0.1"
    tags:
      - chroot

  - name: Create default chroot /dev entries
    command: chdir=/home/{{item}}/dev /dev/MAKEDEV std
    with_items:
      - participantUI
    tags:
      - chroot

  - include_vars: includes/chroot_env.yml
    tags:
      - chroot

  - name: make chroot dirs
    shell: mkdir -p /home/participantUI/$(dirname {{item}})
    with_items: "{{CHROOT_ENV}}"
    tags:
      - chroot

  - name: copy chroot files
    shell: cp -p {{item}} /home/participantUI/$(dirname {{item}})
    with_items: "{{CHROOT_ENV}}"
    tags:
      - chroot

#  - name: Copying needed files to participantUI chroot
#    copy:
#      src:  "{{item}}"
#      mode: "preserve"
#      remote_src: yes
#      follow: no
#      dest: "/home/participantUI/{{item}}"
#      owner: "root"
#      group: "wheel"
#    with_items: "{{CHROOT_ENV}}"
#    tags:
#      - chroot

  - name: Activate install php modules
    shell: "cp /etc/php-{{versions.PHP}}.sample/*.ini /etc/php-{{versions.PHP}}/"


  - name: "Create participant/config/db.php"
    copy:
      dest: "/home/participantUI/{{domain_name}}/frontend/config/db.php"
      mode: '0444'
      content: |
        <?php
          return [
            'class' => 'yii\\db\\Connection',
            'dsn' => 'mysql:host={{db_ip}};dbname=echoCTF',
            'username' => 'participantUI',
            'password' => 'participantUI',
            'charset' => 'utf8mb4',
            'schemaCacheDuration' => 0,
            'queryCacheDuration'=>60,
            'enableSchemaCache' => true,
            'enableQueryCache'=>true,
            //'schemaCache' => 'qcache',
            //'queryCache'=>'qcache',
          ];
    tags:
      - conf

  - name: "Create participant/config/cache.php"
    copy:
      dest: "/home/participantUI/{{domain_name}}/frontend/config/cache.php"
      mode: '0444'
      content: |
        <?php
          return [
            'class' => 'yii\\caching\\MemCache',
            'useMemcached' => true,
            'servers' => [
              [
                'host' => '{{db_ip}}',
                'port' => 11211,
                'weight' => 60
              ]
            ]
          ];
    tags:
      - conf

  - name: Create validation key for participantUI
    copy:
      content: "<?php return '{{validation_key}}';"
      dest: /home/participantUI/{{domain_name}}/frontend/config/validationKey.php
      mode: '0444'
    tags:
      - conf

  - name: Create nginx participantUI.conf
    template:
      src: ../templates/nginx.conf.j2
      dest: /etc/nginx/{{item.user}}.conf
    with_items:
      - { user: 'participantUI', domain: '{{domain_name}}', root: "/{{domain_name}}/frontend/web", port: 80, fpm: '127.0.0.1:9001', home: '/home/participantUI', ip: '{{pui_ext_ip}}' }
    tags:
      - nginx

  - name: Create nginx dt.conf
    template:
      src: ../templates/dt.conf.j2
      dest: /etc/nginx/dt.conf
    with_items:
      - { user: 'www', domain: '{{domain_name}}', root: "/htdocs" }
    tags:
      - nginx

#
# XXXFIXMEXXX
#
# Generate self signed certificate if certs not found on destination folders
#

  - name: Clean artifact path
    file:
      state: absent
      path: /etc/php-fpm.conf

  - name: Fixing php-fpm.conf
    ini_file: dest=/etc/php-fpm.conf section="{{item.section}}" option="{{item.option}}" value="{{item.value}}" mode="0644" owner=root group=wheel create=yes
    tags:
      - ini
    with_items:
      - { section: "global", option: "include", value: "/etc/php-fpm.d/*.conf" }
      - { section: participantui, option: user, value: "participantUI" }
      - { section: participantui, option: group, value: "participantUI" }
      - { section: participantui, option: listen, value: "127.0.0.1:9001" }
      - { section: participantui, option: pm, value: "dynamic" }
      - { section: participantui, option: pm.max_children, value: 5 }
      - { section: participantui, option: pm.start_servers, value: 2 }
      - { section: participantui, option: pm.max_spare_servers, value: 3 }
      - { section: participantui, option: pm.min_spare_servers, value: 1 }
      - { section: participantui, option: chroot, value: "/home/participantUI" }
      - { section: participantui, option: "php_admin_value[sendmail_path]", value: "/bin/femail -t" }
      - { section: participantui, option: "php_admin_value[session.save_handler]", value: "memcached" }
      - { section: participantui, option: "php_admin_value[session.save_path]", value: "{{db_ip}}:11211" }
      - { section: participantui, option: "php_admin_value[session.name]", value: "PUISESSID" }


  - name: Fixing /etc/php.ini
    ini_file: dest=/etc/php-{{versions.PHP}}.ini section={{item.section}} option={{item.option}} value={{item.value}} mode=0644 owner=root group=wheel
    with_items:
      - { section: PHP, option: "cgi.fix_pathinfo", value: 0 }
      - { section: PHP, option: "expose_php", value: "Off" }
      - { section: PHP, option: "log_errors_max_len", value: 4096 }
      - { section: PHP, option: "html_errors", value: "Off" }
      - { section: PHP, option: "max_execution_time", value: "60" }
      - { section: PHP, option: "max_input_time", value: "120" }
      - { section: PHP, option: "memory_limit", value: "256M" }
      - { section: PHP, option: "error_reporting", value: "E_NONE" }
      - { section: PHP, option: "post_max_size", value: "180M" }
      - { section: PHP, option: "upload_max_filesize", value: "120M" }
      - { section: Session, option: "session.save_handler", value: "memcached"}
      - { section: Session, option: "session.save_path", value: "{{db_ip}}:11211"}
      - { section: Session, option: "session.gc_maxlifetime", value: "43200" }
      - { section: Session, option: "session.use_strict_mode", value: "1" }
      - { section: Session, option: "session.cookie_httponly", value: "1" }
      - { section: Session, option: "session.cookie_secure", value: "1" }
      - { section: Session, option: "session.cookie_samesite", value: '"Strict"' }
      - { section: opcache, option: "opcache.enable", value: "1" }
      - { section: opcache, option: "opcache.memory_consumption", value: "128" }
      - { section: opcache, option: "opcache.validate_timestamps", value: "0" }
      - { section: opcache, option: "opcache.revalidate_freq", value: "2" }
      - { section: opcache, option: "opcache.revalidate_path", value: "0" }

  - name: copy nginx rc.d into participant
    command: cp /etc/rc.d/nginx "/etc/rc.d/{{item}}"
    with_items:
      - participant

  - name: configure folders and permissions
    command: "{{item}}"
    with_items:
      - mkdir -p /home/participantUI/{{domain_name}}/frontend/web/assets
      - mkdir -p /home/participantUI/{{domain_name}}/frontend/web/images/avatars/team
      - mkdir -p /var/log/cron
      - chown -R participantUI /home/participantUI/{{domain_name}}/frontend/web/assets
      - chown -R participantUI /home/participantUI/{{domain_name}}/frontend/web/images/avatars/
      - ln -sf /home/participantUI/{{domain_name}}/frontend/yii /usr/local/bin/frontend

  - name: configure participant rc.d
    command: rcctl {{item}}
    with_items:
      - enable participant
      - enable nginx
      - set participant flags -p /home/participantUI -c /etc/nginx/participantUI.conf
      - set nginx flags -c /etc/nginx/dt.conf
      - set syslogd flags -a /home/participantUI/dev/log
      - set ntpd flags -s
    tags:
      - rcctl

  - name: Copy nginx cache folder to participantUI
    command: "{{item}}"
    with_items:
      - cp -pr /var/www/cache /home/participantUI/
      - chown -R participantUI /home/participantUI/cache

  - name: Generate DH params file for nginx
    command: openssl dhparam -out /etc/ssl/private/dhparam.pem 2048

  - ansible.builtin.include_tasks: includes/selfsigned.yml

  - name: Fix needed permissions
    file:
      path: "{{item.path}}"
      owner: "{{item.owner}}"
      group: "{{item.group}}"
      mode: "{{item.mode}}"
    with_items:
      - { path: "/home/participantUI/{{domain_name}}/frontend/runtime", owner: 'participantUI', group: 'participantUI', mode: '0755' }

  - name: configure composer
    command: php -d allow_url_fopen=on /usr/local/bin/composer -n config --global --auth github-oauth.github.com {{GITHUB_OAUTH_TOKEN}}
    when: GITHUB_OAUTH_TOKEN is defined and GITHUB_OAUTH_TOKEN!=""

  - name: run composer
    command: chdir=/home/participantUI/{{domain_name}}/frontend php -d allow_url_fopen=on /usr/local/bin/composer install -n --no-dev --prefer-dist --no-progress --ignore-platform-reqs

  - name: Fix home folder permissions for nginx
    command: chown root.daemon /home/participantUI

  - name: Setting up sysctl.conf
    sysctl:
      name: "{{ item.key }}"
      value: "{{ item.value }}"
    with_dict: "{{ sysctl }}"

  - name: Copy login.conf
    copy:
      src: ../templates/login.conf.j2
      dest: /etc/login.conf
      owner: root
      group: wheel
      mode: "0644"

  - name: Update crontab PATH variable
    cron:
      user: root
      name: PATH
      env: yes
      job: "/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"


  - name: Install cron entries
    cron:
      name: "{{item.name}}"
      user: "root"
      minute: "{{item.minute | default(omit)}}"
      special_time: "{{item.special_time|default(omit)}}"
      job: "{{item.job}}"
    with_items:
      - { name: "Generate target social images", minute: "*/30",  job: "-ns frontend generator/target-social-images >>/var/log/cron/target-social-images.log" }
      - { name: "Generate local routes file", minute: "*/30",  job: "-ns frontend generator/routes >>/var/log/cron/routes.log" }
      - { name: "Generate local disabled-routes file", minute: "*/30",  job: "-ns frontend generator/disabled-routes >>/var/log/cron/disabled-routes.log" }
      - { name: "Generate local player-disabled-routes file", minute: "*/30",  job: "-ns frontend generator/player-disabled-routes >>/var/log/cron/player-disabled-routes.log" }
      - { name: "Update admin IP's", minute: "*/5", job: "-ns nstables {{admins_domain}}" }
      - { name: "Update admin IP's at boot", special_time: "reboot", job: "-ns nstables {{admins_domain}}" }

  - name: Install post hook
    copy:
      content: |
        #!/bin/ksh
        cp /etc/letsencrypt/live/{{domain_name}}/fullchain.pem /etc/nginx/{{domain_name}}-server.crt
        cp /etc/letsencrypt/live/{{domain_name}}/privkey.pem /etc/nginx/{{domain_name}}-server.key
      dest: /etc/nginx/install_renewed_cert.sh
      mode: "0500"

  - name: Create /etc/letsencrypt folders
    ansible.builtin.file:
      path: /etc/letsencrypt
      state: directory
      mode: '0750'

  - name: Install sample lexicon (vultr)
    copy:
      content: |
        #!/usr/bin/env ksh
        /usr/local/bin/lexicon vultr --auth-token=YOUR_TOKEN_HERE "$1" "${CERTBOT_DOMAIN}" TXT --name "_acme-challenge.${CERTBOT_DOMAIN}" --content "${CERTBOT_VALIDATION}" || exit 255
        if [ "$1" == "create" ]; then
          sleep 30
        fi
      dest: /etc/letsencrypt/lexicon-vultr.sh
      mode: "0500"

  - name: Install renewal policy for letsencrypt
    ini_file:
      path: "/etc/letsencrypt/renewal/{{domain_name}}.conf"
      section: renewalparams
      option: "{{item.key}}"
      value: "{{item.value}}"
    with_items:
      - { key: manual_auth_hook, value: "/etc/letsencrypt/lexicon-vultr.sh create" }
      - { key: manual_cleanup_hook, value: "/etc/letsencrypt/lexicon-vultr.sh delete" }
      - { key: post_hook, value: "/etc/nginx/install_renewed_cert.sh" }

  - name: copy nstables script
    copy:
      src: ../files/nstables.sh
      dest: /usr/local/sbin/nstables
      owner: root
      group: wheel
      mode: '0555'

  - name: Execute fw_update
    command: fw_update -a

  - name: Execute syspatch
    command: syspatch
    failed_when: result.rc not in [0,2]
    register: result

  - name: Re-Execute syspatch in case it updated it self on the previous run
    command: syspatch
    failed_when: result.rc not in [0,2]
    register: result

  - debug: msg={{ post_inst.split('\n') }}
