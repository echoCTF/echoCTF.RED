#!/usr/bin/env ansible-playbook
---
- name: "Setup docker registry on an OpenBSD server (standalone)"
  hosts: all
  become_method: doas
  gather_facts: no
  vars_prompt:
    - name: "myname"
      prompt: "1/9. System FQDN?"
      default: "registry.example.com"
      private: no
    - name: "registry_user"
      prompt: "2/9. User to run the registry as?"
      default: "registry"
      private: no
    - name: "registry_home"
      prompt: "3/9. Home folder for registry user?"
      default: "/home/registry"
      private: no
    - name: "registry_storage"
      prompt: "4/9. Storage location for registry images?"
      default: "/home/registry/storage"
      private: no
    - name: "registry_bind_ip"
      prompt: "5/9. Registry bind IP?"
      default: "0.0.0.0"
      private: no
    - name: "registry_bind_port"
      prompt: "6/9. Registry bind port?"
      default: "5000"
      private: no
    - name: "registry_targets_if"
      prompt: "7/9. Targets interface?"
      default: "vio1"
      private: no
    - name: "registry_targets_cidr"
      prompt: "8/9. Targets interface IP CIDR?"
      default: "10.0.0.100/24"
      private: no
    - name: "admins_domain"
      prompt: "9/9. admin domain for TXT rules?"
      default: "admin.example.com"
      private: no
  vars:
    ansible_python_interpreter: /usr/local/bin/python3
    registry:
      user: "{{registry_user}}"
      home: "{{registry_home}}"
      storage: "{{registry_storage}}"
      ip: "{{registry_bind_ip}}"
      port: "{{registry_bind_port}}"
    users:
      - { name: "{{registry_user}}", comment: "Docker Registry User", uid: 3750, password: '*' }
    rcctl:
      - { name: 'supervisord', state: "enable" }
    packages:
    - ansible
    - go
    - supervisor
    - py3-setuptools
    - git
    - rsync--

  tasks:
  - name: Sync date time
    raw: rdate pool.ntp.org

  - name: Install packages
    raw: "pkg_add -I {{packages| join(' ')}}"

  - name: Gather facts
    setup:

  - name: Set hostname
    hostname:
      name: "{{myname}}"

  - name: Make hostname permanent (/etc/myname)
    copy:
      content: "{{ myname }}\n"
      dest: /etc/myname

  - name: Configure PS1 for root and skeleton
    lineinfile:
      path: "{{item}}"
      owner: root
      group: wheel
      mode: '0640'
      line: "export PS1='\\u@\\H:\\w\\$ '"
    with_items:
      - '/etc/skel/.profile'
      - '/root/.profile'

  - name: Configure HISTFILE for root and skeleton
    lineinfile:
      path: "{{item}}"
      owner: root
      group: wheel
      mode: '0640'
      line: "export HISTFILE=~/.sh_history"
    with_items:
      - '/etc/skel/.profile'
      - '/root/.profile'

  - name: Add users
    user:
      name: "{{item.name}}"
      comment: "{{item.comment}}"
      uid: "{{item.uid}}"
      password: '{{item.password}}'
    with_items: "{{users}}"
    tags: create_users

  - name: copy nstables script
    copy:
      src: ../files/nstables.sh
      dest: /usr/local/sbin/nstables
      owner: root
      group: wheel
      mode: '0555'

  - name: Create necessary registry PF Configurations
    copy:
      dest: "{{item.dest}}"
      owner: root
      group: wheel
      content: "{{item.content}}"
    with_items:
      - { dest: "/etc/service.pf.conf", content: "anchor \"dynamic\"\npass quick inet proto tcp from <service_clients> to port {{registry_bind_port}} label \"service_clients\"\n"}
      - { dest: "/etc/service_clients.conf", content: "{{registry_targets_cidr}}\n"}

  - name: Dump administrators PF table
    raw: "pfctl -t administrators -T show > /etc/administrators.conf"

  - name: Load new pf
    command: pfctl -f /etc/pf.conf

  - name: Clean registry distribution
    command: rm -rf /root/distribution

  - name: Get registry distribution
    command: git clone https://github.com/distribution/distribution.git
    environment:
      GOPATH: "{{registry.home}}/go"

  - name: Checkout working hash for distribution
    command: git checkout 90939f1173f65356e724f398793b4d7239a49595
    args:
      chdir: /root/distribution
    environment:
      GOPATH: "{{registry.home}}/go"

  - name: Build registry
    command: go build main.go
    args:
      chdir: /root/distribution/cmd/registry
      creates: /root/distribution/cmd/registry/main
    environment:
      GOPATH: "{{registry.home}}/go"

  - name: Install registry binary
    command: install -o root /root/distribution/cmd/registry/main /usr/local/sbin/registry
    args:
      creates: /usr/local/sbin/registry

  - name: Prepare registry folders
    command: mkdir -p {{registry.storage}} /etc/nginx

  - name: Create /etc/rc.d/docker_registry
    template:
      src: "{{playbook_dir}}/../templates/docker_registry.rc.j2"
      dest: "/etc/rc.d/docker_registry"
      mode: "0555"

  - name: "Process templates"
    template:
      src: "{{item.src}}"
      dest: "{{item.dest}}"
    with_items:
      - { src: '{{playbook_dir}}/../templates/httpd.conf.j2', dest: '/etc/httpd.conf', domain: '{{myname}}' }
      - { src: '{{playbook_dir}}/../templates/acme-client.conf.j2', dest: '/etc/acme-client.conf', domain: '{{myname}}', challenge_dir: "/var/www/acme" }

  - name: Create /etc/docker-registry.yml
    template:
      src: "{{playbook_dir}}/../templates/docker-registry.yml.j2"
      dest: "/etc/docker-registry.yml"

  - name: Change ownerships
    command: chown -R {{registry.user}}:{{registry.user}} {{registry.home}} {{registry.storage}}

  - name: Configure supervisor registry service
    community.general.ini_file:
      path: /etc/supervisord.d/registry.ini
      section: "program:registry"
      option: "{{item.key}}"
      value:  "{{item.value}}"
      mode: '0600'
      backup: false
    with_dict:
      user: registry
      directory: /home/registry
      command: /usr/local/sbin/registry serve /etc/docker-registry.yml
      stdout_logfile: /var/log/registry.log
      stdout_logfile_maxbytes: 0
      stderr_logfile: /var/log/registry.log
      stderr_logfile_maxbytes: 0

  - name: Configure default services
    command: "rcctl {{item.state}} {{item.name}}"
    when: item.state is defined
    with_items: "{{rcctl}}"

  - name: Issue certificate for the system
    raw: "{{item}}"
    register: ret
    ignore_errors: true
    with_items:
    - "pfctl -f /etc/pf.conf"
    - "rcctl -f start httpd"
    - 'echo "pass quick on egress inet proto tcp to port 80" | /sbin/pfctl -a dynamic -f -'
    - "acme-client {{myname}}"
    - "rcctl -f stop httpd"
    - "/sbin/pfctl -a dynamic -Fr"
    - "chmod +r /etc/nginx/{{myname}}-server.key"

  - name: Configure targerts interface
    lineinfile:
      path: "/etc/hostname.{{registry_targets_if}}"
      owner: root
      group: wheel
      mode: '0640'
      line: "{{item}}"
      create: yes
    with_items:
      - "inet {{registry_targets_cidr | ansible.utils.ipaddr('address')}} {{registry_targets_cidr | ansible.utils.ipaddr('netmask')}} NONE group targets"
      - "up -inet6"

  - name: Bring targets interface up
    command: sh /etc/netstart {{registry_targets_if}}

  - name: Create empty cron
    copy:
      dest: /tmp/empty.cron
      content: |
        SHELL=/bin/sh
        PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
        HOME=/var/log

  - name: Clear cron
    raw: crontab /tmp/empty.cron

  - name: Install cron entries
    cron:
      name: "{{item.name}}"
      user: "root"
      minute: "{{item.minute | default(omit)}}"
      special_time: "{{item.special_time|default(omit)}}"
      job: "{{item.job}}"
    with_items:
      - { name: "Update admin IP's", minute: "*/5", job: "-ns nstables {{admins_domain}}" }
      - { name: "Update admin IP's at boot", special_time: "reboot", job: "-ns nstables {{admins_domain}}" }

#  - set_fact:
#      post_install: |
#        Dont forget:
#          - Registry is public
#
#  - debug: msg={{ post_install.split('\n') }
