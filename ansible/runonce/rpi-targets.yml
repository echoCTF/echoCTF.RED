#!/usr/bin/env ansible-playbook
---
- name: Create RPI based targets
  hosts: rpi
  gather_facts: false
  #serial: 1
  remote_user: pi
  become: true
  become_method: sudo
  become_user: root
  tasks:
  - name: set timezone to UTC
    timezone:
      name: UTC

  - name: Set hostname based on host_var
    hostname:
      name: "{{fqdn}}"

  - name: Set static IP
    template:
      src: ../files/etc_network_interfaces.j2
      dest: /etc/network/interfaces

  - name: update package cache
    apt:
      update_cache: yes

  - name: Update all packages to the latest version
    apt:
      upgrade: dist
    register: upgrade_result
    tags:
      - upgrade

  - name: install preInst packages
    apt: name="{{item.name}}" state="{{item.state}}"
    when: item.stage is defined
    with_items:
      - "{{apt}}"
      - "{{localapt|default(omit)}}"

  - name: Add apt keys
    when: aptKeys is defined
    apt_key:
      url: "{{item.key}}"
      state: "{{item.state}}"
    with_items: "{{aptKeys}}"

  - name: Add apt repositories
    when: aptRepos is defined
    apt_repository:
      repo: "{{item.repo}}"
      state: "{{item.state}}"
    with_items: "{{aptRepos}}"

  - name: update package cache
    apt:
      update_cache: yes

  - name: install remaining packages
    apt: name="{{item.name}}" state="{{item.state}}"
    when: item.stage is not defined
    with_items: "{{apt}}"

  - name: execute raspi-config
    command: raspi-config nonint {{item.cmd}} {{item.val}}
    with_items:
      - "{{raspiconfig}}"
    when: raspiconfig is defined

  - name: pip3 install
    pip: name="{{item.name}}" version="{{item.version|default(omit)}}" state="{{item.state}}" executable="pip3" break_system_packages=true
    with_items: "{{pip3}}"

  - name: Create {{paths.files}} directory
    file:
      path: "{{paths.files}}"
      state: directory
      owner: root
      group: root
      mode: 0750

  - name: Create {{paths.node}}/lib/flows recursively
    when: paths is defined and NODERED is defined
    file:
      path: "{{paths.node}}/lib/flows"
      state: directory
      owner: root
      group: root
      mode: 0750
      recurse: yes

  - name: Copy update-nodejs-and-nodered script
    when: NODERED is defined
    copy:
      src: ../files/update-nodejs-and-nodered
      dest: /tmp/update-nodejs-and-nodered
      mode: 0555

  - name: Run update-nodejs-and-nodered (this takes a while)
    when: NODERED is defined
    raw: /tmp/update-nodejs-and-nodered --node18 --nodered-user=root --no-init --confirm-pi --confirm-install --confirm-root
    tags:
      - node-red

  - name: npm install
    when: NODERED is defined
    npm: name="{{item.name}}" version="{{item.version}}" state="{{item.state}}" path="{{item.path}}" executable="/usr/bin/npm --unsafe-perm=true --allow-root"
    with_items: "{{npm}}"

  - name: npm install global, unsafe, allow root
    when: NODERED is defined
    command: npm install -g {{item.name}} --unsafe-perm={{item.unsafe}} --allow-root
    with_items: "{{npmglobalunsaferoot}}"

  - name: Enable node-red on system startup
    when: sysdservices is defined
    systemd:
      name: "{{item.name}}.service"
      enabled: yes
    with_items: "{{sysdservices}}"

  - name: Changing nodered systemd script (User pi -> root)
    when: NODERED is defined
    lineinfile:
      path: /lib/systemd/system/nodered.service
      regexp: '^User=pi'
      line: 'User=root'

  - name: Changing nodered systemd script (Group pi -> root)
    when: NODERED is defined
    lineinfile:
      path: /lib/systemd/system/nodered.service
      regexp: '^Group=pi'
      line: 'Group=root'

  - name: Changing nodered systemd script (WorkDir /home/pi -> /root)
    when: NODERED is defined
    lineinfile:
        path: /lib/systemd/system/nodered.service
        regexp: '^WorkingDirectory=/home/pi'
        line: 'WorkingDirectory=/root'

  - name: Ensure groups exist
    group:
      name: "{{item.group}}"
      gid: "{{item.uid|default(omit)}}"
      state: present
    with_items: "{{DETAILS}}"
    when: DETAILS is defined and item.module is defined and item.module=='user'

  - name: users based on details
    user:
      name: "{{item.username}}"
      shell: "{{item.shell|default('/bin/bash')}}"
      comment: "{{item.gecos|default(omit)}}"
      uid: "{{item.uid|default(omit)}}"
      group: "{{item.group|default(omit)}}"
      password: "{{item.password}}"
      state: present
      update_password: always
    with_items: "{{DETAILS}}"
    when: DETAILS is defined and item.module is defined and item.module=='user'

  - name: Synchronize files
    when: synchronize is defined
    ansible.posix.synchronize:
      src: "{{item.src}}"
      dest: "{{item.dest}}"
      group: false
      owner: false
      archive: true
      delete: "{{item.delete|default(true)}}"
      recursive: true
    with_items: "{{synchronize}}"
    tags:
      - synchronize

  - name: Fix synchronized files ownership
    when: synchronize is defined
    command: "chown -R {{item.owner}}:{{item.group}} {{item.dest}}"
    with_items: "{{synchronize}}"
    tags:
      - synchronize

  - name: "Create flags on local filesystem"
    when: item.path is defined
    with_items: "{{ETSCTF_TREASURES}}"
    file:
      path: "{{item.path}}{{item.code}}"
      state: touch
    tags:
      - treasures

  - name: "Create flag with content on local filesystem to be used as volumes"
    when: item.fullpath is defined
    with_items: "{{ETSCTF_TREASURES}}"
    lineinfile:
      create: yes
      dest: "{{item.fullpath}}"
      line: '{{item.content|default("ETSCTF_"+item.code)}}'
    tags:
      - treasures

  - name: Replace ETSCTF placeholders
    when: item.replace is defined
    with_items: "{{ETSCTF_TREASURES}}"
    replace:
      dest: '{{item.file}}'
      regexp: '{{item.replace}}'
      replace: 'ETSCTF_{{item.code}}'
      backup: no
    tags:
      - treasures

  - name: Copy raw configs
    when: RAW_CONFS is defined
    copy:
      content: "{{item.value.content}}\n"
      dest: "{{item.key}}"
      mode: "{{item.value.mode|default(omit)}}"
      owner: "{{item.value.uid|default(0)}}"
      group: "{{item.value.gid|default(0)}}"
    with_dict: "{{RAW_CONFS}}"

  - name: Generate INI files
    when: INI_FILES is defined
    ini_file:
      path: "{{item.file}}"
      section: "{{item.section}}"
      option: "{{item.option}}"
      value: "{{item.value}}"
      backup: false
    with_items: "{{INI_FILES}}"
    tags:
      - ini

  - name: Parse defined templates
    when: templates is defined
    template:
      src: "{{item.src}}"
      dest: "{{item.dest}}"
      owner: "{{item.owner}}"
      group: "{{item.group}}"
      mode: "{{item.mode}}"
    with_items: "{{templates}}"


  - name: BUILD_COMMANDS.replace
    when: BUILD_COMMANDS is defined and BUILD_COMMANDS.replace is defined
    with_items: "{{BUILD_COMMANDS.replace}}"
    replace:
      dest: '{{item.file}}'
      regexp: '{{item.pattern}}'
      replace: '{{item.value}}'
      backup: no
  - name: BUILD_COMMANDS.lineinfile
    when: BUILD_COMMANDS is defined and BUILD_COMMANDS.lineinfile is defined
    with_items: "{{BUILD_COMMANDS.lineinfile}}"
    lineinfile:
      create: yes
      path: '{{item.file}}'
      line: '{{item.value}}'
      backup: no

  - name: BUILD_COMMANDS.exec
    when: BUILD_COMMANDS is defined and BUILD_COMMANDS.exec is defined
    with_items: "{{BUILD_COMMANDS.exec}}"
    raw: "{{item.cmd}}"
    tags:
      - exec

  - name: Set authorized keys for users
    when: sshkeys is defined
    authorized_key:
      user: "{{item.dest}}"
      state: present
      key: "{{item.key}}"
    with_items: "{{sshkeys}}"

