<?php

namespace app\modules\moderation\models;

use Yii;
use app\modules\frontend\models\Player;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "abuser".
 *
 * @property int $id
 * @property int $player_id
 * @property string|null $title
 * @property string|null $body
 * @property string|null $reason
 * @property string $model
 * @property int $model_id
 * @property string|null $created_at
 * @property string|null $updated_at
 *
 * @property Player $player
 */
class Abuser extends \yii\db\ActiveRecord
{
  public $created_at_ago, $updated_at_ago;
  public function behaviors()
  {
    return [
      [
        'class' => TimestampBehavior::class,
        'value' => new \yii\db\Expression('NOW()'),

      ]
    ];
  }


  /**
   * {@inheritdoc}
   */
  public static function tableName()
  {
    return 'abuser';
  }

  /**
   * {@inheritdoc}
   */
  public function rules()
  {
    return [
      [['title', 'body', 'reason', 'created_at', 'updated_at'], 'default', 'value' => null],
      [['player_id', 'model', 'model_id'], 'required'],
      [['player_id', 'model_id'], 'integer'],
      [['body'], 'string'],
      [['created_at', 'updated_at'], 'safe'],
      [['title', 'reason', 'model'], 'string', 'max' => 255],
      [['player_id'], 'exist', 'skipOnError' => true, 'targetClass' => Player::class, 'targetAttribute' => ['player_id' => 'id']],
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function attributeLabels()
  {
    return [
      'id' => 'ID',
      'player_id' => 'Player ID',
      'title' => 'Title',
      'body' => 'Body',
      'reason' => 'Reason',
      'model' => 'Model',
      'model_id' => 'Model ID',
      'created_at' => 'Created At',
      'updated_at' => 'Updated At',
    ];
  }

  /**
   * Gets query for [[Player]].
   *
   * @return \yii\db\ActiveQuery|yii\db\ActiveQuery
   */
  public function getPlayer()
  {
    return $this->hasOne(Player::class, ['id' => 'player_id']);
  }

  /**
   * Get related record for the current record
   */
  public function getRelated()
  {
    switch ($this->model) {
      case 'treasure':
        return $this->hasOne(\app\modules\gameplay\models\Treasure::class, ['id' => 'model_id']);
      default:
        break;
    }
    return null;
  }

  /**
   * Get formatted record
   */
  public function getFormatted()
  {
    if ($this->related === null) {
      return sprintf('produced %s generated by [%s] for model [%s] with id [%d], <abbr title="%s">%s</abbr>', $this->title, $this->reason, $this->model, $this->model_id, $this->created_at, $this->created_at_ago);
    }

    switch ($this->reason) {
      case 'tai_player_treasure':
        return sprintf('claimed the flag [%s] for [%s] before findings, <abbr title="%s">%s</abbr>', $this->related->name, $this->related->target->name, $this->created_at, $this->created_at_ago);
    }
  }

  /**
   * {@inheritdoc}
   * @return AbuserQuery the active query used by this AR class.
   */
  public static function find()
  {
    return new AbuserQuery(get_called_class());
  }

  /**
   * Try to return the reason for this failed claim
   */
  public function forFailedClaim()
  {
    $string = preg_replace_callback('/(etsctf|tsctf|sctf|ctf|tf|f)_([a-zA-Z0-9_]+)/i', function ($matches) {
      return trim($matches[2]);
    }, $this->title);
    $secretKey = \Yii::$app->sys->treasure_secret_key;

    $result = \app\modules\gameplay\models\TreasureFinder::findByEncryptedCode($secretKey, '%' . $string . '%');

    if (is_array($result) && $result !== []) {
      if (array_key_exists('player_id', $result)) {
        $originalPlayer = \app\modules\frontend\models\Player::findOne($result['player_id']);
      }
      if (array_key_exists('treasure_id', $result)) {
        $originalTreasure = \app\modules\gameplay\models\Treasure::findOne($result['treasure_id']);
      }
      $profileLink = \app\widgets\ProfileLink::widget([
        'username' => $originalPlayer->username,
        'actions' => false
      ]);
      $offenderLink = \app\widgets\ProfileLink::widget([
        'username' => $this->player->username,
        'actions' => false
      ]);
      if ($this->player->teamPlayer)
        $from = sprintf("[%s] from team [%s]", $offenderLink, $this->player->teamPlayer->team->name);
      else
        $from = "[$offenderLink]";

      if ($originalPlayer->teamPlayer)
        $to = sprintf("[%s] from team [%s]", $profileLink, $originalPlayer->teamPlayer->team->name);
      else
        $to = "[$profileLink]";
      $msg = "- $from tried to claim code [<small><code>".trim($this->title)."</code></small>] that belongs to player $to for target [" . $originalTreasure->target->name . "] and treasure [" . $originalTreasure->name . "]";
      return $msg;
    }
    return null;
  }
}
