<?php

namespace app\modules\frontend\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use app\modules\activity\models\PlayerQuestion;
use app\modules\activity\models\PlayerTreasure;
use app\modules\activity\models\SpinQueue;
use app\modules\activity\models\SpinHistory;
use app\modules\activity\models\Report;
use app\modules\activity\models\Stream;
use app\modules\gameplay\models\Hint;
use app\modules\gameplay\models\Finding;
use app\modules\gameplay\models\Treasure;
use yii\helpers\html;

/**
 * This is the model class for table "player".
 *
 * @property string $authKey
 *
 * @method ban()
 * @method saveWithSsl()
 * @method mail()
 * @method genPassword()
 * @method createTeam()
 *
 */
class Player extends PlayerAR
{

  public function ban()
  {
    $ban = new \app\modules\frontend\models\BannedPlayer;
    $ban->old_id = $this->id;
    $ban->username = $this->username;
    $ban->email = $this->email;
    $ban->registered_at = $this->created;
    $ban->banned_at = new \yii\db\Expression('NOW()');
    if ($ban->save() && $this->delete() !== false)
      return true;
    return false;
  }
  /**
   * {@inheritdoc}
   */
  public function getAuthKey()
  {
    return $this->auth_key;
  }

  public function saveWithSsl()
  {
    if (!$this->save()) {
      return false;
    }

    $playerSsl = new PlayerSsl();
    $playerSsl->player_id = $this->id;
    $playerSsl->generate();
    if ($playerSsl->save()) {
      return $playerSsl->refresh();
    }
    return false;
  }

  /**
   * Send mail to player with
   * @param string $subject
   * @param string $html
   * @param string $txt
   * @param array $headers
   * @return bool
   */
  public function mail($subject, $html, $txt, $headers = [])
  {
    // Get mailer
    try {
      $message = \Yii::$app->mailer->compose()
        ->setFrom([\app\modules\settings\models\Sysconfig::findOne('mail_from')->val => \app\modules\settings\models\Sysconfig::findOne('mail_fromName')->val])
        ->setTo([$this->email => $this->username])
        ->setSubject($subject)
        ->setTextBody($txt)
        ->setHtmlBody($html);
      foreach ($headers as $entry)
        $message->addHeader($entry[0], $entry[1]);
      $message->send();
      if (Yii::$app instanceof \yii\web\Application)
        \Yii::$app->session->setFlash('success', Yii::t('app', "The user has been mailed."));
      else {
        echo Yii::t('app', "The user has been mailed."), "\n";
      }
    } catch (\Exception $e) {
      if (Yii::$app instanceof \yii\web\Application)
        \Yii::$app->session->setFlash('notice', Yii::t('app', "Failed to send mail to user. {exception}", ['exception' => Html::encode($e->getMessage())]));
      else
        echo Yii::t('app', "Failed to send mail to user."), "\n";

      return false;
    }
    return true;
  }

  public function genPassword($password)
  {
    if ($password === false or $password === '0') {
      $password = Yii::$app->security->generateRandomString(8);
      echo Yii::t('app', "Autogenerated password: {password}\n", ['password' => $password]);
    }
    return $password;
  }

  public function createTeam($team_name, $approved)
  {
    if ($team_name === false)
      return;

    $team = Team::findOne(['name' => trim($team_name)]);
    if ($team === null) {
      $team = new Team();
      $team->name = trim($team_name);
      $team->academic = $this->academic;
      $team->token = Yii::$app->security->generateRandomString(20);
      $team->owner_id = $this->id;
      $team->description = $this->username;
      $team->save(false);
      $ts = new \app\modules\activity\models\TeamScore();
      $ts->team_id = $team->id;
      $ts->points = 0;
      $ts->save();
    }
    if (($tp = TeamPlayer::findOne(['team_id' => $team->id, 'player_id' => $this->id])) === null) {
      $tp = new TeamPlayer;
      $tp->player_id = $this->id;
      $tp->team_id = $team->id;
    }

    $tp->approved = intval($approved);
    if ($team->owner_id === $this->id) {
      $tp->approved = 1;
    }

    if (!$tp->save())
      echo Yii::t('app', "Error saving team player\n");
  }

  /**
   * Send a notification to current user
   */
  public function notify($type = "info", $title, $body)
  {
    $n = new \app\modules\activity\models\Notification;
    $n->player_id = $this->id;
    $n->archived = 0;
    $n->category = $type;
    $n->title = $title;
    $n->body = $body;
    return $n->save();
  }

  public function getAcademicLong()
  {
    return Yii::$app->sys->{"academic_" . $this->academic . "long"};
  }

  public function getAcademicShort()
  {
    return Yii::$app->sys->{"academic_" . $this->academic . "short"};
  }
  public function getVerification_token()
  {
    if (($model = PlayerToken::findOne(['player_id' => $this->id, 'type' => 'email_verification'])) !== null)
      return $model->token;
    return null;
  }

  public function getPassword_reset_token()
  {
    if (($model = PlayerToken::findOne(['player_id' => $this->id, 'type' => 'password_reset'])) !== null)
      return $model->token;
    return null;
  }
  /**
   * Generates new password reset token
   */
  public function generatePasswordResetToken()
  {
    if (($model = PlayerToken::findOne(['player_id' => $this->id, 'type' => 'password_reset'])) === null) {
      $model = new PlayerToken();
      $validity = (\Yii::$app->sys->password_reset_token_validity === false) ? '10 day' : \Yii::$app->sys->password_reset_token_validity;
      $model->player_id = $this->id;
      $model->type = 'password_reset';
      $model->expires_at = \Yii::$app->formatter->asDatetime(new \DateTime('NOW + ' . $validity), 'php:Y-m-d H:i:s');
      $model->token = str_replace('_', '-', Yii::$app->security->generateRandomString(30));
      $model->save();
    }
  }

  public function generateEmailVerificationToken()
  {
    if (($model = PlayerToken::findOne(['player_id' => $this->id, 'type' => 'email_verification'])) === null) {
      $model = new PlayerToken();
      $validity = (\Yii::$app->sys->mail_verification_token_validity === false) ? '10 day' : \Yii::$app->sys->mail_verification_token_validity;
      $model->player_id = $this->id;
      $model->type = 'email_verification';
      $model->expires_at = \Yii::$app->formatter->asDatetime(new \DateTime('NOW + ' . $validity), 'php:Y-m-d H:i:s');
      $model->token = str_replace('_', '-', Yii::$app->security->generateRandomString(30));
      $model->save();
    }
  }
}
