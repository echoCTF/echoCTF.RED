<?php

namespace app\modules\frontend\models;

use yii\db\Expression;
use yii\behaviors\TimestampBehavior;
use yii\behaviors\AttributeTypecastBehavior;

use Yii;

/**
 * This is the model class for table "player_token".
 *
 * @property int $player_id
 * @property string $type
 * @property string $token
 * @property string $expires_at
 * @property string $created_at
 *
 * @property Player $player
 */
class PlayerToken extends \yii\db\ActiveRecord
{
  /**
   * {@inheritdoc}
   */
  public static function tableName()
  {
    return 'player_token';
  }

  public function init()
  {
    parent::init();
    if (!method_exists($this, 'search') && $this->isNewRecord) //for checking this code is on model search or not
    {
      $this->type = 'API';
      if ($this->description === null)
        $this->description = (string)$this->description;
      $this->token = Yii::$app->security->generateRandomString(30);
    }
  }
  public function behaviors()
  {
    return [
      'typecast' => [
        'class' => AttributeTypecastBehavior::class,
        'typecastAfterValidate' => true,
        'typecastBeforeSave' => true,
        'typecastAfterFind' => true,
      ],
      'timestamp' => [
        'class' => TimestampBehavior::class,
        'createdAtAttribute' => 'created_at',
        'updatedAtAttribute' => 'created_at',
        'value' => new Expression('NOW()'),
        'preserveNonEmptyValues' => true,
      ],
    ];
  }
  /**
   * {@inheritdoc}
   */
  public function rules()
  {
    return [
      ['token', 'default', 'value' => Yii::$app->security->generateRandomString(30)],
      ['description', 'default', 'skipOnEmpty' => false, 'skipOnError' => false, 'value' => 'auto-generated by backend'],
      [['type'], 'default', 'value' => 'API'],
      [['player_id', 'type', 'token'], 'required'],
      [['player_id'], 'integer'],
      [['expires_at', 'created_at'], 'datetime', 'format' => 'php:Y-m-d H:i:s'],
      [['expires_at', 'created_at', 'description'], 'safe'],
      [['type'], 'string', 'max' => 32],
      [['token'], 'string', 'max' => 128],
      [['description'], 'string'],
      [['token'], 'unique'],
      [['player_id', 'type'], 'unique', 'targetAttribute' => ['player_id', 'type']],
      [['player_id'], 'exist', 'skipOnError' => true, 'targetClass' => Player::class, 'targetAttribute' => ['player_id' => 'id']],
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function attributeLabels()
  {
    return [
      'player_id' => Yii::t('app', 'Player ID'),
      'type' => Yii::t('app', 'Type'),
      'token' => Yii::t('app', 'Token'),
      'expires_at' => Yii::t('app', 'Expires At'),
      'created_at' => Yii::t('app', 'Created At'),
    ];
  }

  /**
   * Gets query for [[Player]].
   *
   * @return \yii\db\ActiveQuery|yii\db\ActiveQuery
   */
  public function getPlayer()
  {
    return $this->hasOne(Player::class, ['id' => 'player_id']);
  }

  /**
   * {@inheritdoc}
   * @return PlayerTokenQuery the active query used by this AR class.
   */
  public static function find()
  {
    return new PlayerTokenQuery(get_called_class());
  }

  public function getTypes()
  {
    return [
      'API' => 'API',
      'password_reset' => 'Password Reset',
      'email_verification' => 'Email Verification'
    ];
  }

  public function beforeSave($insert) {
    if ($insert) {
      if ($this->type === 'email_verification') {
        $this->expires_at = new Expression('now() + INTERVAL '.\Yii::$app->sys->mail_verification_token_validity);
      } else if ($this->type === 'password_reset') {
        $this->expires_at = new Expression('now() + INTERVAL '.\Yii::$app->sys->password_reset_token_validity);
      } else
        $this->expires_at = new Expression('now() + INTERVAL 60 day');
    }
    return parent::beforeSave($insert);
}

}
